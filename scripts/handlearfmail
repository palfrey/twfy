#!/usr/bin/perl -w
#
# handlearfmail:
# Handle incoming mail messages containing abuse reports
#
# This script should be invoked through the .forward mechanism.
#
# Copyright (c) 2009 UK Citizens Online Democracy. All rights reserved.
# Email: louise@mysociety.org; WWW: http://www.mysociety.org/

my $rcsid = ''; $rcsid .= '$Id: handlearfmail,v 1.9 2009-05-19 11:45:15 louise Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../../perllib";
use lib "$FindBin::Bin/../perllib";
use mySociety::HandleMail;
use WWW::Mechanize;
use Error qw(:try);
use mySociety::SystemMisc qw(print_log);
use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
# Don't print diagnostics to standard error, as this can result in bounce
# messages being generated (only in response to non-bounce input, obviously).
mySociety::SystemMisc::log_to_stderr(0);
#----------------------
sub unsubscribe($){
    my ($original_message) = @_;
    my $twfy_unsub_pattern = 'http://'. mySociety::Config::get('DOMAIN') . '/D/\S+';
    my $unsublink;
    return unless $original_message =~ /Subject: Your TheyWorkForYou email alert/;
    if ($original_message =~ m#($twfy_unsub_pattern)$#m){
        $unsublink = $1;
        my $m = new WWW::Mechanize;
        $m->get($unsublink);   
    }else{
        throw Error::Simple("Couldn't find unsubscribe link in Abuse Report mail");
    }
}
#----------------------
my %data = mySociety::HandleMail::get_message();
my $lines = $data{lines};
my $r = mySociety::HandleMail::parse_arf_mail($lines);
try{
    if (defined($r)){
        my %attributes = %{$r};
        if ($attributes{feedback_type} eq 'abuse'){
            my $original_message = $attributes{original_message};
            unsubscribe($original_message);
        }   
    } 
}catch Error::Simple with{
    my $E = shift;
    print_log('err', $E->text() . "\n");
}finally{
    exit(0);
};
