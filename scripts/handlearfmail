#!/usr/bin/perl -w
#
# handlearfmail:
# Handle incoming mail messages containing abuse reports
#
# This script should be invoked through the .forward mechanism.
#
# Copyright (c) 2009 UK Citizens Online Democracy. All rights reserved.
# Email: louise@mysociety.org; WWW: http://www.mysociety.org/

my $rcsid = ''; $rcsid .= '$Id: handlearfmail,v 1.2 2009-05-18 15:21:10 louise Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../../perllib";
use lib "$FindBin::Bin/../perllib";
use mySociety::HandleMail;
use WWW::Mechanize;
use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
# Don't print diagnostics to standard error, as this can result in bounce
# messages being generated (only in response to non-bounce input, obviously).
mySociety::SystemMisc::log_to_stderr(0);
#----------------------
sub unsubscribe($){
    my @lines = @_;
    my $twfy_unsub_pattern = 'http://'. mySociety::Config::get('DOMAIN') . '/D/\S+';
    my $unsublink;
    foreach my $line (@lines) {
        if ($line =~  /$twfy_unsub_pattern/){
            $unsublink = $1;
            my $m = WWW::Mechanize->new();
            $m->get($unsublink);   
        }
    }   
}
#----------------------
my %data = mySociety::HandleMail::get_message();
my @lines = $data{lines};
my $r = mySociety::HandleMail::parse_arf_mail(\@lines);
if (defined($r)){
    my %attributes = %{$r};
    if ($attributes{feedback_type} == 'abuse'){
        my @message_lines = @{$attributes{original_message}};
        unsubscribe(@message_lines);
    }
}
exit(0);
